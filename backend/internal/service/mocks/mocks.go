// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source internal/service/service.go -destination internal/service/mocks/mocks.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/usamaroman/demo_indev_hackathon/backend/internal/entity"
	types "github.com/usamaroman/demo_indev_hackathon/backend/internal/entity/types"
	service "github.com/usamaroman/demo_indev_hackathon/backend/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GenerateTokens mocks base method.
func (m *MockAuth) GenerateTokens(ctx context.Context, userID int64) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthMockRecorder) GenerateTokens(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuth)(nil).GenerateTokens), ctx, userID)
}

// ParseAccessToken mocks base method.
func (m *MockAuth) ParseAccessToken(accessToken string) (*service.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", accessToken)
	ret0, _ := ret[0].(*service.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockAuthMockRecorder) ParseAccessToken(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockAuth)(nil).ParseAccessToken), accessToken)
}

// ParseRefreshToken mocks base method.
func (m *MockAuth) ParseRefreshToken(refreshToken string) (*service.RefreshTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", refreshToken)
	ret0, _ := ret[0].(*service.RefreshTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MockAuthMockRecorder) ParseRefreshToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MockAuth)(nil).ParseRefreshToken), refreshToken)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUser) GetByID(ctx context.Context, id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUser)(nil).GetByID), ctx, id)
}

// GetByLogin mocks base method.
func (m *MockUser) GetByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserMockRecorder) GetByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUser)(nil).GetByLogin), ctx, login)
}

// MockHotel is a mock of Hotel interface.
type MockHotel struct {
	ctrl     *gomock.Controller
	recorder *MockHotelMockRecorder
}

// MockHotelMockRecorder is the mock recorder for MockHotel.
type MockHotelMockRecorder struct {
	mock *MockHotel
}

// NewMockHotel creates a new mock instance.
func NewMockHotel(ctrl *gomock.Controller) *MockHotel {
	mock := &MockHotel{ctrl: ctrl}
	mock.recorder = &MockHotelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotel) EXPECT() *MockHotelMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockHotel) CreateReservation(ctx context.Context, input *service.CreateReservationInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockHotelMockRecorder) CreateReservation(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockHotel)(nil).CreateReservation), ctx, input)
}

// GetAvailableRooms mocks base method.
func (m *MockHotel) GetAvailableRooms(ctx context.Context, start, end time.Time) ([]entity.RoomType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRooms", ctx, start, end)
	ret0, _ := ret[0].([]entity.RoomType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRooms indicates an expected call of GetAvailableRooms.
func (mr *MockHotelMockRecorder) GetAvailableRooms(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRooms", reflect.TypeOf((*MockHotel)(nil).GetAvailableRooms), ctx, start, end)
}

// GetRoomByID mocks base method.
func (m *MockHotel) GetRoomByID(ctx context.Context, id string) (*entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", ctx, id)
	ret0, _ := ret[0].(*entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockHotelMockRecorder) GetRoomByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockHotel)(nil).GetRoomByID), ctx, id)
}

// GetUserCurrentReservation mocks base method.
func (m *MockHotel) GetUserCurrentReservation(ctx context.Context, userID int64) (*entity.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCurrentReservation", ctx, userID)
	ret0, _ := ret[0].(*entity.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCurrentReservation indicates an expected call of GetUserCurrentReservation.
func (mr *MockHotelMockRecorder) GetUserCurrentReservation(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCurrentReservation", reflect.TypeOf((*MockHotel)(nil).GetUserCurrentReservation), ctx, userID)
}

// RoomHasReservations mocks base method.
func (m *MockHotel) RoomHasReservations(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomHasReservations", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoomHasReservations indicates an expected call of RoomHasReservations.
func (mr *MockHotelMockRecorder) RoomHasReservations(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomHasReservations", reflect.TypeOf((*MockHotel)(nil).RoomHasReservations), ctx, id)
}

// UpdateReservationStatus mocks base method.
func (m *MockHotel) UpdateReservationStatus(ctx context.Context, id string, status types.ReservationType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReservationStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReservationStatus indicates an expected call of UpdateReservationStatus.
func (mr *MockHotelMockRecorder) UpdateReservationStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReservationStatus", reflect.TypeOf((*MockHotel)(nil).UpdateReservationStatus), ctx, id, status)
}
